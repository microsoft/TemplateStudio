<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    x:Class="Microsoft.Templates.UI.Styles.ListView"
    xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
    xmlns:Themes="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
    xmlns:controls="clr-namespace:Microsoft.Templates.UI.Controls"
    xmlns:services="clr-namespace:Microsoft.Templates.UI.Services"
    xmlns:res="clr-namespace:Microsoft.Templates.Resources;assembly=SharedResources"
    xmlns:converters="clr-namespace:Microsoft.Templates.UI.Converters"
    xmlns:extensions="clr-namespace:Microsoft.Templates.UI.Extensions"
    xmlns:theming="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Imaging"
    xmlns:utilities="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Utilities"
    xmlns:catalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
    xmlns:templateSelector="clr-namespace:Microsoft.Templates.UI.TemplateSelectors"
    >

    <!-- This file groups all resources into a single file for ease of cross referencing.
     This makes things MUCH easier when used from a SharedProject 
    -->

    <!--#region DrawingImage-->

    <DrawingImage x:Key="TSIconWarning">
        <DrawingImage.Drawing>
            <DrawingGroup>
                <DrawingGroup.Children>
                    <GeometryDrawing Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z" />
                    <GeometryDrawing Brush="#FFF6F6F6" Geometry="F1M7.0002,-0.000199999999999534L0.000200000000000422,13.9998 2.0002,15.9998 14.0002,15.9998 16.0002,13.9998 9.0002,-0.000199999999999534z" />
                    <GeometryDrawing Brush="#FFFFCC00" Geometry="F1M9,10L7,10 7,5 9,5z M9,13L7,13 7,11 9,11z M8.382,1L7.618,1 1.217,13.803 2.5,15 13.5,15 14.783,13.803z" />
                    <GeometryDrawing Brush="#FF000000" Geometry="F1M9,11L7,11 7,13 9,13z M9,10L7,10 7,5 9,5z" />
                </DrawingGroup.Children>
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="TSIconError">
        <DrawingImage.Drawing>
            <DrawingGroup>
                <DrawingGroup.Children>
                    <GeometryDrawing Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z" />
                    <GeometryDrawing Brush="#FFF6F6F6" Geometry="F1M16,8C16,12.418 12.418,16 8,16 3.582,16 0,12.418 0,8 0,3.582 3.582,0 8,0 12.418,0 16,3.582 16,8" />
                    <GeometryDrawing Brush="#FFE41400" Geometry="F1M12.4141,11L11.0001,12.414 8.0001,9.414 5.0001,12.414 3.5861,11 6.5861,8 3.5861,5 5.0001,3.586 8.0001,6.586 11.0001,3.586 12.4141,5 9.4141,8z M8.0001,1C4.1341,1 1.0001,4.135 1.0001,8 1.0001,11.865 4.1341,15 8.0001,15 11.8651,15 15.0001,11.865 15.0001,8 15.0001,4.135 11.8651,1 8.0001,1" />
                    <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1M9.4141,8L12.4141,11 11.0001,12.414 8.0001,9.414 5.0001,12.414 3.5861,11 6.5861,8 3.5861,5 5.0001,3.586 8.0001,6.586 11.0001,3.586 12.4141,5z" />
                </DrawingGroup.Children>
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="TSIconInfo">
        <DrawingImage.Drawing>
            <DrawingGroup>
                <DrawingGroup.Children>
                    <GeometryDrawing Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z" />
                    <GeometryDrawing Brush="#FFF6F6F6" Geometry="F1M0,8.0005C0,3.5825 3.582,0.000499999999998835 8,0.000499999999998835 12.418,0.000499999999998835 16,3.5825 16,8.0005 16,12.4185 12.418,16.0005 8,16.0005 3.582,16.0005 0,12.4185 0,8.0005" />
                    <GeometryDrawing Brush="#FF1AA1E2" Geometry="F1M9,5L7,5 7,3 9,3z M9,13L7,13 7,6 9,6z M8,1C4.135,1 1,4.135 1,8 1,11.865 4.135,15 8,15 11.865,15 15,11.865 15,8 15,4.135 11.865,1 8,1" />
                    <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1M7,5L9,5 9,3 7,3z M7,6L9,6 9,13 7,13z" />
                </DrawingGroup.Children>
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="TSIconRestoreWindow">
        <DrawingImage.Drawing>
            <DrawingGroup>
                <DrawingGroup.Children>
                    <GeometryDrawing
                        Brush="{Binding ButtonText, Source={x:Static services:UIStylesService.Instance}}"
                        Geometry="M 10 7.9980469 H 7.9980469 V 10 H 0 V 2.0019531 H 2.0019531 V 0 H 10 Z m -2.9980469 -5 H 1.0009766 V 8.9990234 H 7.0019531 Z M 8.9990234 1.0009766 H 2.9980469 v 1.0009765 h 5 v 5 h 1.0009765 z" />
                </DrawingGroup.Children>
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="TSIconMaximizeWindow">
        <DrawingImage.Drawing>
            <DrawingGroup>
                <DrawingGroup.Children>
                    <GeometryDrawing
                        Brush="{Binding ButtonText, Source={x:Static services:UIStylesService.Instance}}"
                        Geometry="M 10 0 V 10 H 0 V 0 Z M 8.9990234 1.0009766 H 1.0009766 v 7.9980468 h 7.9980468 z" />
                </DrawingGroup.Children>
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="TSIconCloseWindow">
        <DrawingImage.Drawing>
            <DrawingGroup>
                <DrawingGroup.Children>
                    <GeometryDrawing
                        Brush="{Binding ButtonText, Source={x:Static services:UIStylesService.Instance}}"
                        Geometry="M 5.7080078 5 10 9.2919922 9.2919922 10 5 5.7080078 0.70800781 10 0 9.2919922 4.2919922 5 0 0.70800781 0.70800781 0 5 4.2919922 9.2919922 0 10 0.70800781 Z" />
                </DrawingGroup.Children>
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>
    <!--#endregion-->

    <!--#region Thickness -->

    <Thickness x:Key="Margin_XS_LeftTopRightBottom">4,4,4,4</Thickness>
    <Thickness x:Key="Margin_XS_Left">4,0,0,0</Thickness>
    <Thickness x:Key="Margin_XS_Right">0,0,4,0</Thickness>
    <Thickness x:Key="Margin_XS_LeftRight">4,0,4,0</Thickness>
    <Thickness x:Key="Margin_XS_Bottom">0,0,0,4</Thickness>
    <Thickness x:Key="Margin_XS_Top">0,4,0,0</Thickness>
    <Thickness x:Key="Margin_XS_TopBottom">0,4,0,4</Thickness>

    <Thickness x:Key="Margin_S_Left">8,0,0,0</Thickness>
    <Thickness x:Key="Margin_S_Right">0,0,8,0</Thickness>
    <Thickness x:Key="Margin_S_LeftTopRightBottom">8,8,8,8</Thickness>
    <Thickness x:Key="Margin_S_LeftTop">8,8,0,0</Thickness>
    <Thickness x:Key="Margin_S_Top">0,8,0,0</Thickness>
    <Thickness x:Key="Margin_S_TopBottom">0,8,0,8</Thickness>
    <Thickness x:Key="Margin_S_Bottom">0,0,0,8</Thickness>

    <Thickness x:Key="Margin_M_Left">12,0,0,0</Thickness>
    <Thickness x:Key="Margin_M_LeftTopRightBottom">12,12,12,12</Thickness>
    <Thickness x:Key="Margin_M_LeftTopRight">12,12,12,0</Thickness>
    <Thickness x:Key="Margin_M_LeftTop">12,12,0,0</Thickness>
    <Thickness x:Key="Margin_M_LeftRight">12,0,12,0</Thickness>
    <Thickness x:Key="Margin_M_Right">0,0,12,0</Thickness>
    <Thickness x:Key="Margin_M_Top">0,12,0,0</Thickness>

    <Thickness x:Key="Margin_M_Left_S_TopBottom">12,8,0,8</Thickness>



    <Thickness x:Key="Margin_M1_LeftRight">14,0,14,0</Thickness>
    <Thickness x:Key="Margin_M1_LeftRight_S_Top">14,8,14,0</Thickness>

    <Thickness x:Key="Margin_M2_LeftRight_S_Top">16,8,16,0</Thickness>
    <Thickness x:Key="Margin_M2_LeftRight_S_TopBottom">16,8,16,8</Thickness>
    <Thickness x:Key="Margin_M2_LeftTopRightBottom">16,16,16,16</Thickness>
    <Thickness x:Key="Margin_M2_LeftRight">16,0,16,0</Thickness>
    <Thickness x:Key="Margin_M2_LeftRight_M_Top">16,12,16,0</Thickness>
    <Thickness x:Key="Margin_M2_LeftRight_M_TopBottom">16,12,16,12</Thickness>


    <Thickness x:Key="Margin_M2_LeftTopRight">16,16,16,0</Thickness>
    <Thickness x:Key="Margin_M2_LeftRight_L_Top">16,24,16,0</Thickness>

    <Thickness x:Key="Margin_M3_LeftTop">20,20,0,0</Thickness>
    <Thickness x:Key="Margin_M3_LeftTopRightBottom">20,20,20,20</Thickness>

    <Thickness x:Key="Margin_L_Left">24,0,0,0</Thickness>
    <Thickness x:Key="Margin_L_LeftTop">24,24,0,0</Thickness>
    <Thickness x:Key="Margin_L_LeftRight">24,0,24,0</Thickness>
    <Thickness x:Key="Margin_L_Top">0,24,0,0</Thickness>

    <Thickness x:Key="Margin_L_LeftRight_M_Top">24,12,24,0</Thickness>
    <Thickness x:Key="Margin_L_LeftRight_M2_Top">24,16,24,0</Thickness>

    <Thickness x:Key="CardBorderThickness">1.5,1.5,1.5,1.5</Thickness>

    <!--#endregion-->

    <!--#region Image -->

    <Style TargetType="Image" x:Key="TSImageNewItemFileIcon">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.AccessibilityNewItemFileIcon}"/>
    </Style>

    <Style TargetType="Image" x:Key="TSImageNewItemImageFiles">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
    </Style>

    <Style TargetType="Image" x:Key="TSImageDialogIcon">
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="StretchDirection" Value="Both" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Margin" Value="{StaticResource Margin_M_Right}" />
    </Style>

    <Style TargetType="Image" x:Key="TSImageNotificationIcon">
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="StretchDirection" Value="Both" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="{StaticResource Margin_M_Left}" />
    </Style>

    <Style TargetType="Image" x:Key="TSImageRestoreButtonIcon">
        <Setter Property="Width" Value="10" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Stretch" Value="None" />
    </Style>

    <Style TargetType="Image" x:Key="TSImageMaximizeButtonIcon">
        <Setter Property="Width" Value="10" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Stretch" Value="None" />
    </Style>

    <Style TargetType="Image" x:Key="TSImageCloseButtonIcon">
        <Setter Property="Width" Value="10" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Stretch" Value="None" />
    </Style>


    <Style TargetType="Image" x:Key="TSBreakingChangesImageIcon">
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="StretchDirection" Value="Both" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="imaging:CrispImage" x:Key="TSCrispImageCardDeprecatedIcon">
        <Setter Property="Height" Value="16" />
        <Setter Property="Width" Value="16" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="{StaticResource Margin_XS_Right}" />
    </Style>

    <Style TargetType="imaging:CrispImage" x:Key="TSCrispImageTemplateDetailsDeprecatedIcon">
        <Setter Property="Height" Value="20" />
        <Setter Property="Width" Value="20" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="{StaticResource Margin_S_Right}" />
    </Style>

    <!--#endregion-->

    <!--#region Button -->

    <Style TargetType="Button" x:Key="TSBaseButton">
        <Setter Property="Foreground" Value="{Binding ButtonText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Background" Value="{Binding Button, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderBrush" Value="{Binding ButtonBorder, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate/>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding ButtonHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding ButtonHoverText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding ButtonBorderHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding ButtonPressed, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding ButtonPressedText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding ButtonBorderPressed, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{Binding ButtonDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding ButtonDisabledText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding ButtonBorderDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Background" Value="{Binding ButtonFocused, Source={x:Static services:UIStylesService.Instance}}" />
                <Setter Property="TextElement.Foreground" Value="{Binding ButtonFocusedText, Source={x:Static services:UIStylesService.Instance}}" />
                <Setter Property="BorderBrush" Value="{Binding ButtonBorderFocused, Source={x:Static services:UIStylesService.Instance}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="TSButton" BasedOn="{StaticResource TSBaseButton}">
        <Setter Property="Width" Value="75" />
        <Setter Property="Height" Value="23" />
    </Style>

    <Style TargetType="Button" x:Key="TSButtonFinish" BasedOn="{StaticResource TSButton}">
        <Setter Property="BorderBrush" Value="{Binding ButtonPressed, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style TargetType="Button" x:Key="TSButtonIcon">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate/>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding ButtonHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{Binding ButtonFocused, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" Value="{Binding ButtonBorderFocused, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding ButtonPressed, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{Binding ButtonDisabledText, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="TSButtonCloseNotification">
        <Setter Property="Background" Value="{Binding IBCloseButton, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderBrush" Value="{Binding IBCloseButtonBorder, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding IBCloseButtonGlyph, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="Margin" Value="{StaticResource Margin_M_Right}" />
        <Setter Property="Padding" Value="{StaticResource Margin_S_LeftTopRightBottom}" />
        <Setter Property="Content" Value="&#xE106;" />
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.ButtonClose}" />
        <Setter Property="ToolTip" Value="{x:Static res:StringRes.ButtonClose}" />

        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="border"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Focusable="False"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding IBCloseButtonHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding IBCloseButtonHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding IBCloseButtonHoverGlyph, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding IBCloseButtonDown, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding IBCloseButtonDownBorder, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" Value="{Binding IBCloseButtonDownGlyph, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{Binding IBButtonDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding IBButtonDisabledBorder, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding IBButtonFocus, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding IBButtonFocusBorder, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="TSButtonDeleteTemplate" BasedOn="{StaticResource TSButtonIcon}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="{StaticResource Margin_XS_LeftTopRightBottom}" />
        <Setter Property="Foreground" Value="{Binding DeleteTemplateIcon, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Content" Value="&#xE10A;" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.ButtonRemove}" />
        <Setter Property="ToolTip" Value="{x:Static res:StringRes.ButtonRemove}" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Foreground" Value="{Binding ButtonFocusedText, Source={x:Static services:UIStylesService.Instance}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="TSButtonWindowButtons" BasedOn="{StaticResource TSBaseButton}">
        <Setter Property="Padding" Value="16,12,16,12" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style TargetType="Button" x:Key="TSButtonRestoreWindow" BasedOn="{StaticResource TSButtonWindowButtons}">
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.ButtonRestore}" />
        <Setter Property="ToolTip" Value="{x:Static res:StringRes.ButtonRestore}" />
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="{StaticResource TSIconRestoreWindow}"
                   Style="{StaticResource TSImageRestoreButtonIcon}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="TSButtonMaximizeWindow" BasedOn="{StaticResource TSButtonWindowButtons}">
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.ButtonMaximize}" />
        <Setter Property="ToolTip" Value="{x:Static res:StringRes.ButtonMaximize}" />
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="{StaticResource TSIconMaximizeWindow}"
                   Style="{StaticResource TSImageMaximizeButtonIcon}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="TSButtonCloseWindow" BasedOn="{StaticResource TSButtonWindowButtons}">
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.ButtonClose}" />
        <Setter Property="ToolTip" Value="{x:Static res:StringRes.ButtonClose}" />
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="{StaticResource TSIconCloseWindow}"
                   Style="{StaticResource TSImageCloseButtonIcon}" />
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="Button" x:Key="ButtonRefreshTemplatesStyle" BasedOn="{StaticResource TSBaseButton}">
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Height" Value="23" />
    </Style>
    <!--#endregion-->

    <!--#region CheckBox -->

    <Style x:Key="TSCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{Binding CheckBoxBackground, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderBrush" Value="{Binding CheckBoxBorder, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding CheckBoxText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="checkBoxBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="1"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path
                                    x:Name="optionMark"
                                    Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                    Fill="{Binding CheckBoxGlyph, Source={x:Static services:UIStylesService.Instance}}"
                                    Margin="1"
                                    Opacity="0"
                                    Stretch="None"/>
                                <Rectangle
                                    x:Name="indeterminateMark"
                                    Fill="{Binding CheckBoxGlyph, Source={x:Static services:UIStylesService.Instance}}"
                                    Margin="2"
                                    Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{Binding CheckBoxBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{Binding CheckBoxBorderHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{Binding CheckBoxGlyphHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{Binding CheckBoxGlyphHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{Binding CheckBoxBackgroundDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{Binding CheckBoxBorderDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{Binding CheckBoxGlyphDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{Binding CheckBoxGlyphDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{Binding CheckBoxBackgroundPressed, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{Binding CheckBoxBorderPressed, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{Binding CheckBoxGlyphPressed, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{Binding CheckBoxGlyphPressed, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{Binding CheckBoxBackgroundFocused, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{Binding CheckBoxBorderFocused, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{Binding CheckBoxGlyphFocused, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{Binding CheckBoxGlyphFocused, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region ImageEx -->

    <Style TargetType="controls:ImageEx" x:Key="TSImageEx">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{Binding CardIcon, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FallbackImage" Value="/SharedResources;component/Assets/DefaultIcon.png" />
        <Setter Property="MaxHeight" Value="48" />
        <Setter Property="MaxWidth" Value="48" />
    </Style>

    <Style TargetType="controls:ImageEx" BasedOn="{StaticResource TSImageEx}" x:Key="TSImageExWithDisabled">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Disabled}" Value="true">
                <Setter Property="Foreground" Value="{Binding ListItemDisabledText, Source={x:Static services:UIStylesService.Instance}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="controls:ImageEx" x:Key="TSImageExProjectDetails" BasedOn="{StaticResource TSImageEx}">
        <Setter Property="MaxHeight" Value="20" />
        <Setter Property="MaxWidth" Value="20" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!--#endregion-->

    <!--#region TextBlock -->

    <!--Global-->
    <Style TargetType="TextBlock" x:Key="TSTextBlockWizardTitle">
        <Setter Property="FontSize" Value="{Binding Environment200PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding HeaderText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="TextTrimming" Value="WordEllipsis"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style TargetType="TextBlock" BasedOn="{StaticResource TSTextBlockWizardTitle}" x:Key="TSTextBlockWizardTitleSecondary">
        <Setter Property="Foreground" Value="{Binding HeaderTextSecondary, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockSectionTitle">
        <Setter Property="FontSize" Value="{Binding Environment122PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding WindowPanelText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockSubSectionTitle">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding WindowPanelText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockSubSectionText">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding WindowPanelText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockAboutSubSectionText" BasedOn="{StaticResource TSTextBlockSubSectionText}">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockTermsAndConditions">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding WizardFooterText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Margin" Value="26,0,0,0" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>


    <!--Sequential Flow-->
    <Style TargetType="TextBlock" x:Key="TSTextBlockSequentialFlow">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="10,5,0,5" />
        <Setter Property="TextTrimming" Value="WordEllipsis"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockSequentialFlowCheckMark">
        <Setter Property="Text" Value="&#xE001;" />
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="10,5,10,5" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <!--Card-->
    <Style TargetType="TextBlock" x:Key="TSTextBlockCardTitle">
        <Setter Property="FontSize" Value="{Binding Environment122PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding CardTitleText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextTrimming" Value="WordEllipsis"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style TargetType="TextBlock" BasedOn="{StaticResource TSTextBlockCardTitle}" x:Key="TSTextBlockCardTitleWithDisabled">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Disabled}" Value="true">
                <Setter Property="Foreground" Value="{Binding ListItemDisabledText, Source={x:Static services:UIStylesService.Instance}}" />
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockCardDescription">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding CardDescriptionText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextTrimming" Value="WordEllipsis"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style TargetType="TextBlock" BasedOn="{StaticResource TSTextBlockCardDescription}" x:Key="TSTextBlockCardDescriptionWithDisabled">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Disabled}" Value="true">
                <Setter Property="Foreground" Value="{Binding ListItemDisabledText, Source={x:Static services:UIStylesService.Instance}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockCardAddedText">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding CardFooterText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="TextTrimming" Value="WordEllipsis"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockCardMouseOverAddIcon">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Foreground" Value="{Binding CardBorderSelected, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Text" Value="&#xE109;" />
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockCardTemplatesCount">
        <Setter Property="Foreground" Value="{Binding CardBackgroundDefault, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockCardAddedIcon">
        <Setter Property="Foreground" Value="{Binding CardBackgroundDefault, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Text" Value="&#xE001;" />
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
    </Style>

    <Style TargetType="Run" x:Key="TSRunHyperlink">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding Hyperlink, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="BaselineAlignment" Value="Center" />
    </Style>
    <Style TargetType="TextBlock" x:Key="TSTextBlockHyperlink">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding Hyperlink, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Margin" Value="0"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockHyperlinkAbout" BasedOn="{StaticResource TSTextBlockHyperlink}">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockCardDeprecatedMessage">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding CardTitleText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style TargetType="TextBlock" BasedOn="{StaticResource TSTextBlockCardDeprecatedMessage}" x:Key="TSTextBlockCardDeprecatedMessageWithDisabled">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Disabled}" Value="true">
                <Setter Property="Foreground" Value="{Binding ListItemDisabledText, Source={x:Static services:UIStylesService.Instance}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--Project Details-->
    <Style TargetType="TextBlock" x:Key="TSTextBlockComboBoxItem">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockSavedTemplateName">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding ListItemText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockDragAndDropTemplate">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Foreground" Value="{Binding CardIcon, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Text" Value="&#xE784;" />
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0"/>
    </Style>

    <!--TemplateDetails-->
    <Style TargetType="TextBlock" x:Key="TSTextBlockTemplateDetailsTitle">
        <Setter Property="FontSize" Value="{Binding Environment133PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Foreground" Value="{Binding WindowPanelText, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockTemplateDetailsDisabledText">
        <Setter Property="FontSize" Value="{Binding Environment122PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding TemplateInfoPageDescription, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockTemplateDetailsPropertyLabel">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Foreground" Value="{Binding WindowPanelText, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockTemplateDetailsPropertyValue">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Foreground" Value="{Binding WindowPanelText, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockNewItemFileSubject">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockTemplateDetailsDeprecatedMessage">
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontSize" Value="{Binding Environment122PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding WindowPanelText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Focusable" Value="False" />
    </Style>

    <!--Changes Summary-->
    <Style TargetType="TextBlock" x:Key="TSTextBlockFileStatusDescription">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding WindowPanelText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockChangesSummaryDetailFileHeader">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding ChangesSummaryDetailFileHeaderText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!--Dialog-->
    <Style TargetType="TextBlock" x:Key="TSTextBlockDialogTitle">
        <Setter Property="FontSize" Value="{Binding Environment155PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding HeaderText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextAlignment" Value="Left" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockDialogDescription">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding WindowPanelText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextAlignment" Value="Left" />
    </Style>

    <!--Project Configuration-->
    <Style TargetType="TextBlock" x:Key="TSTextBlockProjectConfigurationDescriptionStyle">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}"/>
        <Setter Property="Foreground" Value="{Binding HeaderText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextAlignment" Value="Justify" />
        <Setter Property="TextWrapping" Value="Wrap" />

    </Style>

    <Style TargetType="TextBlock" x:Key="TSTextBlockProjectConfigurationComboBoxHeaderStyle">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}"/>
        <Setter Property="Foreground" Value="{Binding WindowPanelText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontWeight" Value="SemiBold"/>
    </Style>

    <!--Composition Tool-->
    <Style TargetType="TextBlock" x:Key="TSTextBlockCompositionToolTreeViewText">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}"/>
        <Setter Property="Foreground" Value="{Binding WindowPanelText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Margin" Value="0,4" />
    </Style>

    <!-- Bullet -->
    <Style TargetType="TextBlock" x:Key="TSTextBlockBullet">
        <Setter Property="Text" Value="&#xE915;" />
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
    </Style>

    <!--#endregion-->

    <!--#region ComboBox -->

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="templateRoot"
                        Background="{Binding ComboBoxBackground, Source={x:Static services:UIStylesService.Instance}}"
                        BorderBrush="{Binding ComboBoxBorder, Source={x:Static services:UIStylesService.Instance}}"
                        BorderThickness="{TemplateBinding BorderThickness}"                        
                        SnapsToDevicePixels="true">
                        <Border
                            x:Name="splitBorder"
                            BorderBrush="Transparent"
                            BorderThickness="1"
                            HorizontalAlignment="Right"
                            Margin="0"
                            SnapsToDevicePixels="true"
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path
                                x:Name="arrow"
                                Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
                                Fill="{Binding ComboBoxGlyph, Source={x:Static services:UIStylesService.Instance}}"
                                HorizontalAlignment="Center"
                                Margin="0"
                                VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{Binding ComboBoxGlyphHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Background" TargetName="templateRoot" Value="{Binding ComboBoxBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{Binding ComboBoxSelection, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{Binding ComboBoxGlyphPressed, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Background" TargetName="templateRoot" Value="{Binding ComboBoxBackgroundPressed, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{Binding ComboBoxBorderPressed, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="{Binding ComboBoxGlyphDisabled, Source={x:Static services:UIStylesService.Instance}}"/>
                            <Setter Property="Background" TargetName="templateRoot" Value="{Binding ComboBoxBackgroundDisabled, Source={x:Static services:UIStylesService.Instance}}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{Binding ComboBoxBorderDisabled, Source={x:Static services:UIStylesService.Instance}}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding IsKeyboardFocused , RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}" Value="True">
                            <Setter Property="Fill" TargetName="arrow" Value="{Binding ComboBoxGlyphHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Background" TargetName="templateRoot" Value="{Binding ComboBoxBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{Binding ComboBoxSelection, Source={x:Static services:UIStylesService.Instance}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TSComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AutomationProperties.Name" Value="{Binding Title}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{Binding ComboBoxListItemText, Source={x:Static services:UIStylesService.Instance}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{Binding ComboBoxListItemTextHover, Source={x:Static services:UIStylesService.Instance}}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding ComboBoxListItemBackgroundHover, Source={x:Static services:UIStylesService.Instance}}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding ComboBoxListItemBorderHover, Source={x:Static services:UIStylesService.Instance}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{Binding ComboBoxListItemTextHover, Source={x:Static services:UIStylesService.Instance}}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding ComboBoxListItemBackgroundHover, Source={x:Static services:UIStylesService.Instance}}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding ComboBoxListItemBorderHover, Source={x:Static services:UIStylesService.Instance}}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{Binding ComboBoxBackground, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Background" TargetName="Bd" Value="{Binding ComboBoxSelection, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding ComboBoxSelection, Source={x:Static services:UIStylesService.Instance}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TSComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{Binding ComboBoxBackground, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderBrush" Value="{Binding ComboBoxBorder, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding ComboBoxText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="6,3,5,3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TSComboBoxItemStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Popup
                            x:Name="PART_Popup"
                            AllowsTransparency="true"
                            Grid.ColumnSpan="2"
                            IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Margin="1"
                            PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                            Placement="Bottom">
                            <Themes:SystemDropShadowChrome
                                x:Name="shadow"
                                Color="Transparent"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                <Border
                                    x:Name="dropDownBorder"
                                    BorderBrush="{Binding ComboBoxBorder, Source={x:Static services:UIStylesService.Instance}}"
                                    BorderThickness="1"
                                    Background="{Binding ComboBoxBackground, Source={x:Static services:UIStylesService.Instance}}">
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle
                                                    x:Name="opaqueRect"
                                                    Fill="{Binding Background, ElementName=dropDownBorder}"
                                                    Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                                    Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter
                                                x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            <!--KeyboardNavigation.DirectionalNavigation="Contained"-->
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Themes:SystemDropShadowChrome>
                        </Popup>
                        <ToggleButton
                            x:Name="toggleButton"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Grid.ColumnSpan="2"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxToggleButton}" />
                        <ContentPresenter
                            x:Name="contentPresenter"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            IsHitTestVisible="false"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                            <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                            <Setter Property="Color" TargetName="shadow" Value="{Binding ComboBoxListBackgroundShadow, Source={x:Static services:UIStylesService.Instance}}"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Foreground" Value="{Binding ComboBoxTextHover, Source={x:Static services:UIStylesService.Instance}}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--ProjectType and Framework-->
    <Style x:Key="ComboBoxMetadataToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="templateRoot"
                        Background="Transparent"
                        BorderThickness="{TemplateBinding BorderThickness}"                        
                        SnapsToDevicePixels="true">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TSComboBoxItemMetadataStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AutomationProperties.Name" Value="{Binding Title}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderThickness="0" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" BorderBrush="Transparent">
                        <!--<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />-->
                        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="20" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <controls:ImageEx
                                x:Name="icon"
                                Grid.Column="0"
                                SourcePath="{Binding Icon}"
                                Style="{StaticResource TSImageExProjectDetails}" />
                            <TextBlock
                                x:Name="name"
                                Grid.Column="1"
                                Text="{Binding Title}"
                                Margin="{StaticResource Margin_M_Left}"
                                Style="{StaticResource TSTextBlockComboBoxItem}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Foreground" TargetName="name" Value="{Binding ComboBoxListItemText, Source={x:Static services:UIStylesService.Instance}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Foreground" TargetName="name" Value="{Binding ListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding ListItemMouseOver, Source={x:Static services:UIStylesService.Instance}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" TargetName="name" Value="{Binding ListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding ListItemMouseOver, Source={x:Static services:UIStylesService.Instance}}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Current}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Current}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding SelectedItemActiveText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="name" Value="{Binding SelectedItemActiveText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Background" TargetName="Bd" Value="{Binding SelectedItemActive, Source={x:Static services:UIStylesService.Instance}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TSComboBoxProjectTypeStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{Binding ComboBoxBackground, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderBrush" Value="{Binding ComboBoxBorder, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding ComboBoxText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="6,3,5,3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TSComboBoxItemMetadataStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
                            </Grid.ColumnDefinitions>
                            <Popup
                                x:Name="PART_Popup"
                                AllowsTransparency="true"
                                Grid.ColumnSpan="2"
                                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Margin="1"
                                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                Placement="Bottom">
                                <Themes:SystemDropShadowChrome
                                    x:Name="shadow"
                                    Color="Transparent"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                    <Border
                                        x:Name="dropDownBorder"
                                        BorderBrush="{Binding ComboBoxBorder, Source={x:Static services:UIStylesService.Instance}}"
                                        BorderThickness="1"
                                        Background="{Binding ComboBoxBackground, Source={x:Static services:UIStylesService.Instance}}">
                                        <ScrollViewer x:Name="DropDownScrollViewer">
                                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle
                                                        x:Name="opaqueRect"
                                                        Fill="{Binding Background, ElementName=dropDownBorder}"
                                                        Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                                        Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                                </Canvas>
                                                <ItemsPresenter
                                                    x:Name="ItemsPresenter"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                <!--KeyboardNavigation.DirectionalNavigation="Contained"-->
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Themes:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton
                                x:Name="toggleButton"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Grid.ColumnSpan="2"
                                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Style="{StaticResource ComboBoxMetadataToggleButton}" />
                            <Grid
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                IsHitTestVisible="false"
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <controls:ImageEx
                                    x:Name="icon"
                                    Grid.Column="0"
                                    SourcePath="{Binding ProjectType.Selected.Icon}"
                                    Style="{StaticResource TSImageExProjectDetails}" />
                                <TextBlock
                                    Grid.Column="1"
                                    Text="{Binding ProjectType.Selected.Title}"
                                    Foreground="{TemplateBinding Foreground}"
                                    Margin="{StaticResource Margin_M_Left}"
                                    Style="{StaticResource TSTextBlockComboBoxItem}" />
                            </Grid>
                            <Border
                                Grid.Column="1"
                                BorderBrush="Transparent"
                                HorizontalAlignment="Right"
                                Margin="0"
                                SnapsToDevicePixels="true"
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path
                                    x:Name="arrow"
                                    Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
                                    Fill="{Binding ComboBoxGlyph, Source={x:Static services:UIStylesService.Instance}}"
                                    HorizontalAlignment="Center"
                                    Margin="0"
                                    VerticalAlignment="Center"/>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ComboBoxTextHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="TextElement.Foreground" Value="{Binding ComboBoxTextHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Background" TargetName="templateRoot" Value="{Binding ComboBoxBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{Binding ComboBoxSelection, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Fill" TargetName="arrow" Value="{Binding ComboBoxGlyphHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ComboBoxTextHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="TextElement.Foreground" Value="{Binding ComboBoxTextHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Background" TargetName="templateRoot" Value="{Binding ComboBoxBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{Binding ComboBoxSelection, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Fill" TargetName="arrow" Value="{Binding ComboBoxGlyphHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                            <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                            <Setter Property="Color" TargetName="shadow" Value="{Binding ComboBoxListBackgroundShadow, Source={x:Static services:UIStylesService.Instance}}"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TSComboBoxFrameworkStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{Binding ComboBoxBackground, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderBrush" Value="{Binding ComboBoxBorder, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding ComboBoxText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="6,3,5,3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TSComboBoxItemMetadataStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
                            </Grid.ColumnDefinitions>
                            <Popup
                                x:Name="PART_Popup"
                                AllowsTransparency="true"
                                Grid.ColumnSpan="2"
                                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Margin="1"
                                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                Placement="Bottom">
                                <Themes:SystemDropShadowChrome
                                    x:Name="shadow"
                                    Color="Transparent"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                    <Border
                                        x:Name="dropDownBorder"
                                        BorderBrush="{Binding ComboBoxBorder, Source={x:Static services:UIStylesService.Instance}}"
                                        BorderThickness="1"
                                        Background="{Binding ComboBoxBackground, Source={x:Static services:UIStylesService.Instance}}">
                                        <ScrollViewer x:Name="DropDownScrollViewer">
                                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle
                                                        x:Name="opaqueRect"
                                                        Fill="{Binding Background, ElementName=dropDownBorder}"
                                                        Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                                        Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                                </Canvas>
                                                <ItemsPresenter
                                                    x:Name="ItemsPresenter"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                <!--KeyboardNavigation.DirectionalNavigation="Contained"-->
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Themes:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton
                                x:Name="toggleButton"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Grid.ColumnSpan="2"
                                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Style="{StaticResource ComboBoxMetadataToggleButton}" />
                            <Grid
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                IsHitTestVisible="false"
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <controls:ImageEx
                                    x:Name="icon"
                                    Grid.Column="0"
                                    SourcePath="{Binding Framework.Selected.Icon}"
                                    Style="{StaticResource TSImageExProjectDetails}" />
                                <TextBlock
                                    Grid.Column="1"
                                    Text="{Binding Framework.Selected.Title}"
                                    Foreground="{TemplateBinding Foreground}"
                                    Margin="{StaticResource Margin_M_Left}"
                                    Style="{StaticResource TSTextBlockComboBoxItem}" />
                            </Grid>
                            <Border
                                Grid.Column="1"
                                BorderBrush="Transparent"
                                HorizontalAlignment="Right"
                                Margin="0"
                                SnapsToDevicePixels="true"
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path
                                    x:Name="arrow"
                                    Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
                                    Fill="{Binding ComboBoxGlyph, Source={x:Static services:UIStylesService.Instance}}"
                                    HorizontalAlignment="Center"
                                    Margin="0"
                                    VerticalAlignment="Center"/>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ComboBoxTextHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="TextElement.Foreground" Value="{Binding ComboBoxTextHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Background" TargetName="templateRoot" Value="{Binding ComboBoxBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{Binding ComboBoxSelection, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Fill" TargetName="arrow" Value="{Binding ComboBoxGlyphHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ComboBoxTextHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="TextElement.Foreground" Value="{Binding ComboBoxTextHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Background" TargetName="templateRoot" Value="{Binding ComboBoxBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{Binding ComboBoxSelection, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Fill" TargetName="arrow" Value="{Binding ComboBoxGlyphHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                            <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                            <Setter Property="Color" TargetName="shadow" Value="{Binding ComboBoxListBackgroundShadow, Source={x:Static services:UIStylesService.Instance}}"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region Expander -->

    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" Padding="{StaticResource Margin_S_LeftTopRightBottom}" Background="{TemplateBinding Background}">
                        <Grid SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Path
                                x:Name="arrow"
                                Data="M 0,0 L 5,5 L 10,0"
                                HorizontalAlignment="Center"
                                SnapsToDevicePixels="false"
                                VerticalAlignment="Center"
                                Stroke="{Binding PageSideBarExpanderChevron, Source={x:Static services:UIStylesService.Instance}}"
                                StrokeThickness="2" />
                            <ContentPresenter
                                Grid.Column="1"
                                HorizontalAlignment="Left"
                                Margin="{StaticResource Margin_S_Left}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="True"
                                VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 0,0  L 5,5  L 0,10"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding PageSideBarExpanderHeaderHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding PageSideBarExpanderHeaderHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding PageSideBarExpanderHeaderPressed, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TSExpander" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{Binding PageSideBarExpanderText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Background" Value="{Binding PageSideBarExpanderBody, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton
                                x:Name="HeaderSite"
                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                Content="{TemplateBinding Header}"
                                DockPanel.Dock="Top"
                                Foreground="{TemplateBinding Foreground}"
                                Background="{Binding PageSideBarExpanderHeader, Source={x:Static services:UIStylesService.Instance}}"
                                FontWeight="{TemplateBinding FontWeight}"
                                FontStyle="{TemplateBinding FontStyle}"
                                FontStretch="{TemplateBinding FontStretch}"
                                FontSize="{TemplateBinding FontSize}"
                                FontFamily="{TemplateBinding FontFamily}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Margin="1"
                                MinWidth="0"
                                MinHeight="0"
                                Padding="{TemplateBinding Padding}"
                                Style="{StaticResource ExpanderDownHeaderStyle}" />
                            <ContentPresenter
                                x:Name="ExpandSite"
                                DockPanel.Dock="Bottom"
                                Focusable="false"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                Visibility="Collapsed"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region Grid -->

    <Style TargetType="Grid" x:Key="TSGridBasePage">
        <Setter Property="Background" Value="{Binding WindowPanel, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style TargetType="Grid" x:Key="TSGridMainPage" BasedOn="{StaticResource TSGridBasePage}">
    </Style>

    <Style TargetType="Grid" x:Key="TSGridMainFooter">
        <Setter Property="Background" Value="{Binding WizardFooter, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style TargetType="Grid" x:Key="TSGridSectionDividerHorizontal">
        <Setter Property="Background" Value="{Binding SectionDivider, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Height" Value="1.5" />
    </Style>

    <Style TargetType="Grid" x:Key="TSGridSectionDividerVertical">
        <Setter Property="Background" Value="{Binding SectionDivider, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Width" Value="1.5" />
    </Style>

    <Style TargetType="Grid" x:Key="TSGridNotification">
        <Setter Property="Background" Value="{Binding IBInfoBarBackground, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style TargetType="Grid" x:Key="TSGridSavedTemplate">
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style TargetType="Grid" x:Key="TSGridSavedTemplateError">
        <Setter Property="Background" Value="{Binding IBInfoBarBackground, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style TargetType="Grid" x:Key="TSGridChangesSummaryDetailFileHeader">
        <Setter Property="Background" Value="{Binding ChangesSummaryDetailFileHeader, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <!--#endregion-->

    <!--#region Hyperlink -->

    <Style TargetType="Hyperlink" x:Key="TSHyperlink">
        <Setter Property="Foreground" Value="{Binding Hyperlink, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextDecorations" Value="{x:Null}" />
        <Setter Property="BaselineAlignment" Value="Bottom" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{Binding Hyperlink, Source={x:Static services:UIStylesService.Instance}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{Binding HyperlinkHover, Source={x:Static services:UIStylesService.Instance}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{Binding HyperlinkDisabled, Source={x:Static services:UIStylesService.Instance}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region ScrollViewer -->

    <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="2,1,2,1"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border
                        x:Name="border"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        Background="Transparent"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Focusable="False"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle
                        x:Name="rectangle"
                        Fill="{Binding ScrollBarThumbBackground, Source={x:Static services:UIStylesService.Instance}}"
                        Height="{TemplateBinding Height}"
                        SnapsToDevicePixels="True"
                        Margin="3,0,3,0"
                        Width="{TemplateBinding Width}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{Binding ScrollBarThumbMouseOverBackground, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{Binding ScrollBarThumbPressedBackground, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TSVerticalScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Border
                            Grid.Row="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" />
                        <RepeatButton
                            x:Name="PART_LineUpButton"
                            Command="{x:Static ScrollBar.LineUpCommand}"
                            IsEnabled="{TemplateBinding IsMouseOver}"
                            Style="{StaticResource ScrollBarButton}">
                            <Path
                                x:Name="ArrowTop"
                                Data="M 0,5 L 5,0 L 10,5"
                                Fill="{Binding ScrollBarArrowGlyph, Source={x:Static services:UIStylesService.Instance}}"
                                Stretch="Uniform" />
                        </RepeatButton>
                        <Track                            
                            x:Name="PART_Track"
                            Grid.Row="1"
                            IsDirectionReversed="true"
                            IsEnabled="{TemplateBinding IsMouseOver}">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
                            </Track.Thumb>
                        </Track>
                        <RepeatButton
                            x:Name="PART_LineDownButton"
                            Grid.Row="2"
                            Command="{x:Static ScrollBar.LineDownCommand}"
                            IsEnabled="{TemplateBinding IsMouseOver}"
                            Style="{StaticResource ScrollBarButton}">
                            <Path
                                x:Name="ArrowBottom"
                                Data="M 0,0 L 5,5 L 10,0"
                                Fill="{Binding ScrollBarArrowGlyph, Source={x:Static services:UIStylesService.Instance}}"
                                Stretch="Uniform" />
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter
                                Property="Fill"
                                TargetName="ArrowBottom"
                                Value="{Binding ScrollBarArrowGlyphPressed, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter
                                Property="Fill"
                                TargetName="ArrowTop"
                                Value="{Binding ScrollBarArrowGlyphPressed, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter
                                Property="Fill"
                                TargetName="ArrowBottom"
                                Value="{Binding ScrollBarArrowGlyphMouseOver, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter
                                Property="Fill"
                                TargetName="ArrowTop"
                                Value="{Binding ScrollBarArrowGlyphMouseOver, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter
                                Property="Fill"
                                TargetName="ArrowTop"
                                Value="{Binding ScrollBarArrowGlyphDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter
                                Property="Fill"
                                TargetName="ArrowBottom"
                                Value="{Binding ScrollBarArrowGlyphDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="TSScrollViewerControlTemplate" TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <ScrollContentPresenter
                x:Name="PART_ScrollContentPresenter"
                Grid.Row="0"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                CanContentScroll="{TemplateBinding CanContentScroll}"
                CanHorizontallyScroll="False"
                CanVerticallyScroll="False"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                Content="{TemplateBinding Content}" />
            <ScrollBar
                x:Name="PART_VerticalScrollBar"
                Grid.Row="0"
                Grid.Column="1"
                AutomationProperties.AutomationId="VerticalScrollBar"
                Cursor="Arrow"
                Maximum="{TemplateBinding ScrollableHeight}"
                Minimum="0"
                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                ViewportSize="{TemplateBinding ViewportHeight}"
                Style="{DynamicResource TSVerticalScrollBarStyle}" />
        </Grid>
    </ControlTemplate>

    <Style TargetType="ScrollViewer" x:Key="TSScrollViewer">
        <Setter Property="Template" Value="{StaticResource TSScrollViewerControlTemplate}" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="PanningMode" Value="VerticalFirst" />
    </Style>

    <!--#endregion-->

    <!--#region ItemsControl -->

    <Style TargetType="ItemsControl" x:Key="TSItemsControl">
        <Setter Property="Focusable" Value="False" />
    </Style>

    <Style TargetType="ItemsControl" x:Key="TSItemsControlWithScroll" BasedOn="{StaticResource TSItemsControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ScrollViewer Style="{StaticResource TSScrollViewer}">
                        <ItemsPresenter />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region TextBox -->

    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>

    <Style x:Key="TSTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{Binding TextBoxBackground, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderBrush" Value="{Binding TextBoxBorder, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding TextBoxText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        x:Name="border"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            x:Name="PART_ContentHost"
                            Focusable="false"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="BorderBrush" Value="{Binding TextBoxBorderFocused, Source={x:Static services:UIStylesService.Instance}}" />
                <Setter Property="Background" Value="{Binding TextBoxBackgroundFocused, Source={x:Static services:UIStylesService.Instance}}" />
                <Setter Property="Foreground" Value="{Binding TextBoxTextFocused, Source={x:Static services:UIStylesService.Instance}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="BorderBrush" Value="{Binding TextBoxBorderDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                <Setter Property="Background" Value="{Binding TextBoxBackgroundDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                <Setter Property="Foreground" Value="{Binding TextBoxTextDisabled, Source={x:Static services:UIStylesService.Instance}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TSTextBoxPlainText" TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Focusable="false"
                        HorizontalScrollBarVisibility="Disabled"
                        VerticalScrollBarVisibility="Disabled" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBox" x:Key="TSTextBoxVersion" BasedOn="{StaticResource TSTextBoxPlainText}">
        <Setter Property="Foreground" Value="{Binding WindowPanelText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="IsReadOnly" Value="True" />

    </Style>


    <!--Error Dialog-->
    <Style TargetType="TextBox" x:Key="TSTextBlockErrorDialogErrorStackTrace" BasedOn="{StaticResource TSTextBoxStyle}">
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.AccessibilityErrorDialogDescriptionTextboxName}" />
    </Style>

    <!--#endregion-->

    <!--#region Ellipse -->

    <Style TargetType="Ellipse" x:Key="TSEllipseNewItemFileCircle">
        <Setter Property="Width" Value="10" />
        <Setter Property="Height" Value="10" />
        <Setter Property="StrokeThickness" Value="1" />
        <Setter Property="Stroke" Value="{Binding WindowPanel, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <!--#endregion-->

    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <converters:SavedTemplateGridConverter x:Key="SavedTemplateGridConverter" />

    <ItemsPanelTemplate x:Key="TSItemsPanelTemplate">
        <WrapPanel Margin="{StaticResource Margin_M2_LeftRight}" Orientation="Horizontal" />
    </ItemsPanelTemplate>

    <!--#region ListView -->

    <!-- New Project Project type / Framework -->

    <Style x:Key="TSListViewItemSingleSelection" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderThickness" Value="{StaticResource CardBorderThickness}" />
        <Setter Property="BorderBrush" Value="{Binding CardBorderDefault, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Background" Value="{Binding CardBackgroundDefault, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Margin" Value="{StaticResource Margin_XS_LeftTopRightBottom}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <MultiBinding StringFormat="{}{0}, {1}">
                    <Binding Path="Title" />
                    <Binding Path="Summary" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="border" Margin="{TemplateBinding Margin}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundSelected, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderSelected, Source={x:Static services:UIStylesService.Instance}}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="false" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderHover, Source={x:Static services:UIStylesService.Instance}}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="false" />
                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderHover, Source={x:Static services:UIStylesService.Instance}}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="OnPreviewMouseLeftButtonDown" />
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="IsSelected" Value="True"/>
            </Trigger>
            <DataTrigger Binding="{Binding Deprecated}" Value="True">
                <Setter Property="AutomationProperties.Name">
                    <Setter.Value>
                        <MultiBinding StringFormat="{}{0}, {1}, {2}">
                            <Binding Path="Title" />
                            <Binding Source="{x:Static res:StringRes.DeprecatedMessage}" />
                            <Binding Path="Summary" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TSListViewSingleSelection" TargetType="{x:Type ListView}">
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalOnly" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ItemsPanel" Value="{StaticResource TSItemsPanelTemplate}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TSListViewItemSingleSelection}" />
        <EventSetter Event="PreviewKeyDown" Handler="OnPreviewKeyDown" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="0" Margin="0" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Margin="0" Padding="0" Style="{StaticResource TSScrollViewer}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--TODO Add IsEnabled visual states-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TSListViewSingleSelectionWithoutScroll" TargetType="{x:Type ListView}">
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ItemsPanel" Value="{StaticResource TSItemsPanelTemplate}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TSListViewItemSingleSelection}" />
        <EventSetter Event="PreviewKeyDown" Handler="OnPreviewKeyDown" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="0" Margin="0" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="TSListViewItemMultipleSelection" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderThickness" Value="{StaticResource CardBorderThickness}" />
        <Setter Property="BorderBrush" Value="{Binding CardBorderDefault, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Background" Value="{Binding CardBackgroundDefault, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="OnPreviewMouseLeftButtonDown" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AutomationProperties.HelpText" Value="{Binding Title, StringFormat={x:Static res:StringRes.HelpTextPressEnterToAddItem}}" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <MultiBinding StringFormat="{}{0}, {1}">
                    <Binding Path="Title" />
                    <Binding Path="Summary" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid Margin="0" Width="181" Height="219">
                        <Border Margin="14,2,2,14" BorderThickness="1.5" BorderBrush="{TemplateBinding BorderBrush}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}" Visibility="{Binding HasMoreThanTwo, Converter={StaticResource BoolToVisibilityConverter}}" />
                        <Border Margin="11,5,5,11" BorderThickness="1.5" BorderBrush="{TemplateBinding BorderBrush}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}" Visibility="{Binding HasMoreThanOne, Converter={StaticResource BoolToVisibilityConverter}}" />

                        <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}" Margin="{StaticResource Margin_S_LeftTopRightBottom}">
                            <ContentPresenter />
                        </Border>
                        <Grid x:Name="addIcon" Visibility="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Top" Height="30" Width="30"  Margin="{StaticResource Margin_M3_LeftTop}">
                            <Ellipse Fill="{Binding CardBackgroundDefault, Source={x:Static services:UIStylesService.Instance}}" Stroke="{Binding CardBorderSelected, Source={x:Static services:UIStylesService.Instance}}" StrokeThickness="1"/>
                            <TextBlock Style="{StaticResource TSTextBlockCardMouseOverAddIcon}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Disabled}" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding CanBeAdded}" Value="true" />
                                <Condition Binding="{Binding Disabled}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Visibility" TargetName="addIcon" Value="Visible" />
                                <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderHover, Source={x:Static services:UIStylesService.Instance}}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="IsSelected" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TSListViewMultipleSelection" TargetType="{x:Type ListView}">
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalOnly"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ItemsPanel" Value="{StaticResource TSItemsPanelTemplate}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TSListViewItemMultipleSelection}" />
        <EventSetter Event="PreviewKeyDown" Handler="OnPreviewKeyDown" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" Padding="{TemplateBinding Padding}" Margin="0" Focusable="False">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--TODO Add IsEnabled visual states-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="TSListViewItemSequentialFlow" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding TDListBoxText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Margin" Value="{StaticResource Margin_S_Bottom}" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="FocusVisualStyle" Value="{Binding FocusVisualStyle, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="AutomationProperties.Name" Value="{Binding Title}" />
        <Setter Property="AutomationProperties.AutomationId" Value="{Binding Path=Index, StringFormat=Step{0:}}" />
        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="OnPreviewMouseLeftButtonDown" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid>
                        <Grid x:Name="bd" MinHeight="35"  Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBlock
                                Grid.Column="0"
                                x:Name="text"
                                Foreground="{TemplateBinding Foreground}"
                                Style="{StaticResource TSTextBlockSequentialFlow}"
                                extensions:TextBlockExtensions.SequentialFlowStep="{Binding}"
                                extensions:TextBlockExtensions.SequentialFlowStepIndex="{Binding Index}"
                                extensions:TextBlockExtensions.SequentialFlowStepCompleted="{Binding Completed}" />
                            <TextBlock
                                Grid.Column="1"
                                x:Name="checkMark"
                                Style="{StaticResource TSTextBlockSequentialFlowCheckMark}"                                    
                                Foreground="{TemplateBinding Foreground}"
                                Visibility="{Binding Completed, Converter={StaticResource BoolToVisibilityConverter}}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}" Value="true">
                            <Setter Property="Background" TargetName="bd" Value="{Binding TDSelectedItemActive, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="text" Value="{Binding TDSelectedItemActiveText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="checkMark" Value="{Binding TDSelectedItemActiveText, Source={x:Static services:UIStylesService.Instance}}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="false" />
                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="bd" Value="{Binding TDListItemMouseOver, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="text" Value="{Binding TDListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="checkMark" Value="{Binding TDListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="false" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="bd" Value="{Binding TDListItemMouseOver, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="text" Value="{Binding TDListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="checkMark" Value="{Binding TDListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" TargetName="text" Value="{Binding TDListItemDisabledText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="checkMark" Value="{Binding TDListItemDisabledText, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TSListViewSequentialFlow" TargetType="{x:Type ListView}">
        <Setter Property="Margin" Value="26,20" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="Focusable" Value="False" />
        <EventSetter Event="PreviewKeyDown" Handler="OnPreviewKeyDown" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TSListViewItemSequentialFlow}" />
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.AccessibilityNavigationMenu}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="TSListViewItemProjectDetailsTemplates" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="AutomationProperties.Name" Value="{Binding Name}" />
        <Setter Property="extensions:FocusExtension.IsFocused" Value="{Binding IsFocused}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid>
                        <Grid Background="{Binding SavedTemplateBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" Visibility="{Binding IsDragging, Converter={StaticResource BoolToVisibilityConverter}}" />
                        <Grid x:Name="mouseOverGrid" Opacity="0" Background="{Binding SavedTemplateBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                        <Grid Style="{Binding HasErrors, Converter={StaticResource SavedTemplateGridConverter}}"/>
                        <Grid Margin="{StaticResource Margin_S_TopBottom}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="22" />
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="26" />
                                </Grid.ColumnDefinitions>
                                <TextBlock
                                    Grid.Column="0"
                                    x:Name="mouseOverDragAndDropTextBlock"
                                    Opacity="0"
                                    Visibility="{Binding IsReorderEnabled, Converter={StaticResource BoolToVisibilityConverter}}"
                                    Style="{StaticResource TSTextBlockDragAndDropTemplate}"/>
                                <controls:ImageEx
                                    Grid.Column="1"
                                    SourcePath="{Binding Icon}"
                                    Style="{StaticResource TSImageExProjectDetails}" />
                                <Grid
                                    Grid.Column="2">
                                    <TextBox
                                        Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        Style="{StaticResource TSTextBoxStyle}"
                                        Margin="{StaticResource Margin_XS_Left}"
                                        Visibility="{Binding ItemNameEditable, Converter={StaticResource BoolToVisibilityConverter}}"
                                        AutomationProperties.Name="{x:Static res:StringRes.AccessibilityEditPageItem}"
                                        extensions:TextBoxExtensions.IsTextSelected="{Binding IsTextSelected}"
                                        Tag="{Binding LostKeyboardFocusCommand}"
                                        LostKeyboardFocus="OnLostKeyboardFocus">
                                        <TextBox.InputBindings>
                                            <KeyBinding Key="Enter" Command="{Binding SetFocusCommand}" />
                                        </TextBox.InputBindings>
                                    </TextBox>
                                    <TextBlock
                                        Text="{Binding Name, Mode=OneWay}"
                                        Style="{StaticResource TSTextBlockSavedTemplateName}"
                                        Margin="{StaticResource Margin_M_Left}"
                                        Visibility="{Binding ItemNameEditable, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=reverse}" />
                                </Grid>
                                <Button x:Name="mouseOverDeleteTemplateButton" Grid.Column="3">
                                    <Button.Style>
                                        <Style TargetType="Button" BasedOn="{StaticResource TSButtonDeleteTemplate}">
                                            <Setter Property="Opacity" Value="0" />
                                            <Setter Property="Command" Value="{Binding DeleteCommand}" />
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </Grid>
                        </Grid>
                        <Grid x:Name="dropGridMask" Visibility="Collapsed" Opacity="0.4" Background="{Binding SavedTemplateBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" TargetName="mouseOverGrid" Value="1" />
                            <Setter Property="Opacity" TargetName="mouseOverDragAndDropTextBlock" Value="1" />
                            <Setter Property="Opacity" TargetName="mouseOverDeleteTemplateButton" Value="1" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Opacity" TargetName="mouseOverGrid" Value="1" />
                            <Setter Property="Opacity" TargetName="mouseOverDragAndDropTextBlock" Value="1" />
                            <Setter Property="Opacity" TargetName="mouseOverDeleteTemplateButton" Value="1" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="true">
                            <Setter Property="Opacity" TargetName="mouseOverGrid" Value="1" />
                            <Setter Property="Opacity" TargetName="mouseOverDragAndDropTextBlock" Value="1" />
                            <Setter Property="Opacity" TargetName="mouseOverDeleteTemplateButton" Value="1" />
                        </Trigger>
                        <EventTrigger RoutedEvent="DragEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="dropGridMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="DragLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="dropGridMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Collapsed}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Drop">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="dropGridMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Collapsed}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <DataTrigger Binding="{Binding IsReorderEnabled}" Value="true">
                            <Setter Property="AutomationProperties.HelpText" Value="{x:Static res:StringRes.ReorderPageHelpText}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TSListViewProjectDetailsTemplates" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TSListViewItemProjectDetailsTemplates}" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.AccessibilityUserSelectionPageList}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="TSListViewItemNewItemFile" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding ListItemText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Margin" Value="{StaticResource Margin_XS_Bottom}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="OnPreviewMouseLeftButtonDown" />
        <Setter Property="AutomationProperties.Name" Value="{Binding Subject}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="bd" ToolTip="{Binding Subject}">
                        <Grid Margin="{StaticResource Margin_S_LeftTopRightBottom}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Ellipse Grid.Column="0" Fill="{Binding CircleColor, FallbackValue=Red}" Style="{StaticResource TSEllipseNewItemFileCircle}" Margin="{StaticResource Margin_XS_Left}" />
                            <Image Grid.Column="1" Source="{Binding Icon}" Style="{StaticResource TSImageNewItemFileIcon}" Margin="{StaticResource Margin_XS_Left}" />
                            <TextBlock x:Name="fileName" Grid.Column="2" Text="{Binding Subject}" Style="{StaticResource TSTextBlockNewItemFileSubject}" Margin="{StaticResource Margin_XS_LeftRight}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}" Value="true">
                            <Setter Property="Background" TargetName="bd" Value="{Binding SelectedItemActive, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="fileName" Value="{Binding SelectedItemActiveText, Source={x:Static services:UIStylesService.Instance}}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="false" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="bd" Value="{Binding ListItemMouseOver, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="fileName" Value="{Binding ListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="false" />
                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="bd" Value="{Binding ListItemMouseOver, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="fileName" Value="{Binding ListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" TargetName="fileName" Value="{Binding ListItemDisabledText, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TSListViewNewItemFile" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{Binding ListItemText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TSListViewItemNewItemFile}" />
        <Setter Property="SelectionMode" Value="Single" />
        <EventSetter Event="PreviewKeyDown" Handler="OnPreviewKeyDown" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <converters:StringVisibilityConverter x:Key="StringVisibilityConverter" />
    <converters:IntegerVisibilityConverter x:Key="IntegerVisibilityConverter" />
    <utilities:BrushToColorConverter x:Key="BrushToColorConverter"/>

    <!--#region DataTemplate -->

    <DataTemplate x:Key="TSItemTemplateBasicInfo">
        <Grid Width="162" Height="200">
            <Grid Margin="{StaticResource Margin_M_LeftTopRightBottom}">
                <Grid.RowDefinitions>
                    <!--Image-->
                    <RowDefinition Height="55" />
                    <!--Title-->
                    <RowDefinition Height="Auto" />
                    <!-- Deprecated message -->
                    <RowDefinition Height="Auto" />
                    <!--Description-->
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <controls:ImageEx
                    Grid.Row="0"
                    SourcePath="{Binding Icon}"
                    Style="{StaticResource TSImageEx}"/>
                <TextBlock
                    Grid.Row="1"
                    Text="{Binding Title}"
                    Style="{StaticResource TSTextBlockCardTitle}" />
                <StackPanel
                    Grid.Row="2"
                    Orientation="Horizontal"
                    Margin="{StaticResource Margin_XS_TopBottom}"
                    Visibility="{Binding Deprecated, Converter={StaticResource BoolToVisibilityConverter}}"
                    theming:ImageThemingUtilities.ImageBackgroundColor="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}, Converter={StaticResource BrushToColorConverter}}">
                    <imaging:CrispImage
                        Style="{StaticResource TSCrispImageCardDeprecatedIcon}"
                        Moniker="{x:Static catalog:KnownMonikers.StatusWarning}" />
                    <TextBlock
                        Text="{x:Static res:StringRes.DeprecatedMessage}" 
                        Style="{StaticResource TSTextBlockCardDeprecatedMessage}"/>
                </StackPanel>
                <TextBlock
                    Grid.Row="3"
                    Text="{Binding Summary}"
                    Style="{StaticResource TSTextBlockCardDescription}"
                    Margin="0,0,0,12" />
            </Grid>
            <TextBlock VerticalAlignment="Bottom"
                       AutomationProperties.Name="{x:Static res:StringRes.ButtonDetails}"
                       AutomationProperties.HelpText="{Binding Title, StringFormat={x:Static res:StringRes.ButtonDetailsHelpText}}">
                <Hyperlink Command="{Binding DetailsCommand}"
                           Style="{StaticResource TSHyperlink}"
                           AutomationProperties.Name="{x:Static res:StringRes.ButtonDetails}"
                           AutomationProperties.HelpText="{Binding Title, StringFormat={x:Static res:StringRes.ButtonDetailsHelpText}}">
                    <Grid Background="Transparent">
                        <TextBlock Text="{x:Static res:StringRes.ButtonDetails}" Style="{StaticResource TSTextBlockHyperlink}" Margin="12,8,12,8" />
                    </Grid>
                </Hyperlink>
            </TextBlock>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="TSItemTemplateCard">
        <Grid>
            <Grid Margin="{StaticResource Margin_M_LeftTopRightBottom}">
                <Grid.RowDefinitions>
                    <!--Image-->
                    <RowDefinition Height="55" />
                    <!--Title-->
                    <RowDefinition Height="Auto" />
                    <!--Description-->
                    <RowDefinition Height="*" />
                    <!--Detail / Status-->
                    <RowDefinition Height="16" />
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Grid.RowSpan="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent"/>
                <controls:ImageEx
                    Grid.Row="0"
                    SourcePath="{Binding Icon}"
                    Style="{StaticResource TSImageExWithDisabled}"/>
                <TextBlock
                    Grid.Row="1"
                    Text="{Binding Title}"
                    Style="{StaticResource TSTextBlockCardTitleWithDisabled}" />
                <TextBlock
                    Grid.Row="2"
                    Text="{Binding Summary}"
                    Style="{StaticResource TSTextBlockCardDescriptionWithDisabled}"
                    Margin="{StaticResource Margin_XS_Top}"/>
                <Grid Grid.Row="3" Margin="0,0,0,-4">
                    <!--Multiple Instance added feedback-->
                    <Grid Visibility="{Binding MultipleInstance, Converter={StaticResource BoolToVisibilityConverter}}" HorizontalAlignment="Right">
                        <Grid Width="18" Height="18" VerticalAlignment="Bottom" Visibility="{Binding Count, Converter={StaticResource IntegerVisibilityConverter}}">
                            <Ellipse Fill="{Binding CardFooterText, Source={x:Static services:UIStylesService.Instance}}"/>
                            <TextBlock Text="{Binding Count}" Style="{StaticResource TSTextBlockCardTemplatesCount}" />
                        </Grid>
                    </Grid>
                    <!--Single Instance added feedback-->
                    <StackPanel Orientation="Horizontal" Visibility="{Binding ShowAddedText, Converter={StaticResource BoolToVisibilityConverter}}" HorizontalAlignment="Right">
                        <TextBlock Text="{x:Static res:StringRes.TemplateAdded}" Style="{StaticResource TSTextBlockCardAddedText}" />
                        <Grid Width="18" Height="18" VerticalAlignment="Bottom" Margin="{StaticResource Margin_XS_Left}">
                            <Ellipse Fill="{Binding CardFooterText, Source={x:Static services:UIStylesService.Instance}}" />
                            <TextBlock Style="{StaticResource TSTextBlockCardAddedIcon}" />
                        </Grid>
                    </StackPanel>
                </Grid>
            </Grid>
            <TextBlock VerticalAlignment="Bottom"
                       AutomationProperties.Name="{x:Static res:StringRes.ButtonDetails}"
                       AutomationProperties.HelpText="{Binding Title, StringFormat={x:Static res:StringRes.ButtonDetailsHelpText}}">
                <Hyperlink Command="{Binding DetailsCommand}"
                           Style="{StaticResource TSHyperlink}"
                           AutomationProperties.Name="{x:Static res:StringRes.ButtonDetails}"
                       AutomationProperties.HelpText="{Binding Title, StringFormat={x:Static res:StringRes.ButtonDetailsHelpText}}">
                    <Grid Background="Transparent">
                        <TextBlock Text="{x:Static res:StringRes.ButtonDetails}" Style="{StaticResource TSTextBlockHyperlink}" Margin="12,8,12,8" />
                    </Grid>
                </Hyperlink>
            </TextBlock>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="TSGroupTemplateCard">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock
                Visibility="{Binding Name, Converter={StaticResource StringVisibilityConverter}}"
                Text="{Binding Name}"
                Margin="{StaticResource Margin_L_LeftRight_M_Top}"
                Style="{StaticResource TSTextBlockSubSectionTitle}" />
            <ListView
                Grid.Row="1"
                Style="{StaticResource TSListViewMultipleSelection}"
                ItemsSource="{Binding Items}"
                ItemTemplate="{StaticResource TSItemTemplateCard}"
                AutomationProperties.Name="{Binding AccessibleName}"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="TSNewItemGroupTemplatePageFeature">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock
                Visibility="{Binding Name, Converter={StaticResource StringVisibilityConverter}}"
                Text="{Binding Name}"
                Margin="{StaticResource Margin_L_LeftRight_M_Top}"
                Style="{StaticResource TSTextBlockSectionTitle}" />
            <ListView
                Grid.Row="1"
                Style="{StaticResource TSListViewSingleSelectionWithoutScroll}"
                ItemsSource="{Binding Items}"
                ItemTemplate="{StaticResource TSItemTemplateBasicInfo}"
                AutomationProperties.Name="{Binding AccessibleName}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="TSItemTemplateDependency">
        <TextBlock AutomationProperties.Name="{Binding Title}">
            <Hyperlink Style="{StaticResource TSHyperlink}" Command="{Binding DetailsCommand}"  AutomationProperties.Name="{Binding Title}">
                <Grid Background="Transparent">
                    <TextBlock Text="{Binding Title}" Style="{StaticResource TSTextBlockHyperlink}" Margin="4,4,4,4" />
                </Grid>
            </Hyperlink>
        </TextBlock>
    </DataTemplate>

    <DataTemplate x:Key="TSItemTemplateRequiredSdk">
        <TextBlock AutomationProperties.Name="{Binding}" Text="{Binding}" Style="{StaticResource TSTextBlockTemplateDetailsPropertyValue}">
        </TextBlock>
    </DataTemplate>

    <DataTemplate x:Key="TSItemTemplateRequiredDotNetVersion">
        <TextBlock AutomationProperties.Name="{Binding}" Text="{Binding}" Style="{StaticResource TSTextBlockTemplateDetailsPropertyValue}">
        </TextBlock>
    </DataTemplate>

    <DataTemplate x:Key="TSItemTemplateRequiredVisualStudioWorkload">
        <TextBlock AutomationProperties.Name="{Binding}" Text="{Binding}" Style="{StaticResource TSTextBlockTemplateDetailsPropertyValue}">
        </TextBlock>
    </DataTemplate>

    <DataTemplate x:Key="TSItemTemplateLayout">
        <TextBlock AutomationProperties.Name="{Binding Template.Title}">
            <Hyperlink Style="{StaticResource TSHyperlink}" Command="{Binding Template.DetailsCommand}"  AutomationProperties.Name="{Binding Template.Title}">
                <Grid Background="Transparent">
                    <TextBlock Text="{Binding Template.Title}" Style="{StaticResource TSTextBlockHyperlink}" Margin="4,4,4,4" />
                </Grid>
            </Hyperlink>
        </TextBlock>
    </DataTemplate>

    <DataTemplate x:Key="TSItemTemplateLicense">
        <TextBlock AutomationProperties.Name="{Binding Text}">
            <Hyperlink Style="{StaticResource TSHyperlink}"
                       Command="{Binding OpenCommand}"
                       AutomationProperties.Name="{Binding Text}"
                       ToolTip="{x:Static res:StringRes.ExternalHyperlinkTooltipMessage}">
                <Grid Background="Transparent">
                    <TextBlock Text="{Binding Text}" Style="{StaticResource TSTextBlockHyperlink}" Margin="4,4,4,4" />
                </Grid>
            </Hyperlink>
        </TextBlock>
    </DataTemplate>


    <!--Changes Summary-->

    <DataTemplate x:Key="TSNewItemFileGroupHeader">
        <TextBlock Text="{Binding}" Style="{StaticResource TSTextBlockNewItemFileSubject}" />
    </DataTemplate>

    <DataTemplate x:Key="TSNewItemFileGroup">
        <controls:ExpanderButtonAutomationPeerControl
            Header="{Binding Title}"
            Style="{StaticResource TSExpander}"
            HeaderTemplate="{StaticResource TSNewItemFileGroupHeader}">
            <ListView
                ItemsSource="{Binding Items}"
                Style="{StaticResource TSListViewNewItemFile}"
                AutomationProperties.Name="{Binding Title}"/>
        </controls:ExpanderButtonAutomationPeerControl>
    </DataTemplate>

    <DataTemplate x:Key="TSDataTemplateChangesSummaryConflictingFileDetailTemplate">
        <Grid Background="{Binding NewItemFileStatusConflictingFile, Source={x:Static services:UIStylesService.Instance}}" />
    </DataTemplate>

    <DataTemplate x:Key="TSDataTemplateChangesSummaryConflictingStylesFileDetailTemplate">
        <Grid Background="{Binding NewItemFileStatusConflictingStylesFile, Source={x:Static services:UIStylesService.Instance}}" />
    </DataTemplate>

    <DataTemplate x:Key="TSDataTemplateChangesSummaryCodeViewer">
        <controls:CodeViewer Item="{Binding}" />
    </DataTemplate>

    <DataTemplate x:Key="TSDataTemplateChangesSummaryImageViewer">
        <Image
            extensions:ImageExtensions.DisposableSource="{Binding TempFile}"
            Style="{StaticResource TSImageNewItemImageFiles}" />
    </DataTemplate>

    <templateSelector:FileExtensionTemplateSelector
        x:Key="fileExtensionTemplateSelector"
        ImageFileTemplate="{StaticResource TSDataTemplateChangesSummaryImageViewer}"
        CodeFileTemplate="{StaticResource TSDataTemplateChangesSummaryCodeViewer}" />

    <templateSelector:FileStatusTemplateSelector x:Key="FileStatusTemplateSelector">
        <templateSelector:FileStatusTemplateSelector.ConflictingFileTemplate>
            <DataTemplate>
                <TextBlock
                    Text="{x:Static res:StringRes.ChangesSummaryGroupConflictingFilesDescription}"
                    Style="{StaticResource TSTextBlockFileStatusDescription}" />
            </DataTemplate>
        </templateSelector:FileStatusTemplateSelector.ConflictingFileTemplate>
        <templateSelector:FileStatusTemplateSelector.ConflictingStylesFileTemplate>
            <DataTemplate>
                <TextBlock
                    Text="{x:Static res:StringRes.ChangesSummaryGroupConflictingStylesFilesDescription}"
                    Style="{StaticResource TSTextBlockFileStatusDescription}" />
            </DataTemplate>
        </templateSelector:FileStatusTemplateSelector.ConflictingStylesFileTemplate>
        <templateSelector:FileStatusTemplateSelector.ModifiedFileTemplate>
            <DataTemplate>
                <TextBlock
                    Text="{x:Static res:StringRes.ChangesSummaryGroupModifiedFilesDescription}"
                    Style="{StaticResource TSTextBlockFileStatusDescription}" />
            </DataTemplate>
        </templateSelector:FileStatusTemplateSelector.ModifiedFileTemplate>
        <templateSelector:FileStatusTemplateSelector.NewFileTemplate>
            <DataTemplate>
                <TextBlock
                    Text="{x:Static res:StringRes.ChangesSummaryGroupNewFilesDescription}"
                    Style="{StaticResource TSTextBlockFileStatusDescription}" />
            </DataTemplate>
        </templateSelector:FileStatusTemplateSelector.NewFileTemplate>
        <templateSelector:FileStatusTemplateSelector.UnchangedFileTemplate>
            <DataTemplate>
                <TextBlock
                    Text="{x:Static res:StringRes.ChangesSummaryGroupUnchangedFilesDescription}"
                    Style="{StaticResource TSTextBlockFileStatusDescription}" />
            </DataTemplate>
        </templateSelector:FileStatusTemplateSelector.UnchangedFileTemplate>
        <templateSelector:FileStatusTemplateSelector.WarningFileTemplate>
            <DataTemplate>
                <StackPanel>
                    <TextBlock
                        Text="{x:Static res:StringRes.ChangesSummaryGroupWarningFilesDescription}"
                        Style="{StaticResource TSTextBlockFileStatusDescription}" />
                    <TextBlock
                        Margin="{StaticResource Margin_XS_Top}"
                        Text="{Binding Description}"
                        Style="{StaticResource TSTextBlockFileStatusDescription}" />
                </StackPanel>
            </DataTemplate>
        </templateSelector:FileStatusTemplateSelector.WarningFileTemplate>
    </templateSelector:FileStatusTemplateSelector>

    <DataTemplate x:Key="TSDataTemplateChangesSummaryDetailTemplate">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter
                    Grid.Column="0"
                    Margin="{StaticResource Margin_M_LeftTopRightBottom}"
                    ContentTemplateSelector="{StaticResource FileStatusTemplateSelector}" />
                <TextBlock Grid.Column="1" AutomationProperties.Name="{x:Static res:StringRes.ChangesSummaryMoreInfoLink}">
                    <Hyperlink Style="{StaticResource TSHyperlink}"
                               Command="{Binding MoreDetailsCommand}"
                               AutomationProperties.Name="{x:Static res:StringRes.ChangesSummaryMoreInfoLink}"
                               ToolTip="{x:Static res:StringRes.ExternalHyperlinkTooltipMessage}">                        
                        <Grid Background="Transparent">
                            <TextBlock
                                Style="{StaticResource TSTextBlockHyperlink}"
                                Margin="{StaticResource Margin_M_LeftTopRightBottom}"
                                Text="{x:Static res:StringRes.ChangesSummaryMoreInfoLink}" />
                        </Grid>
                    </Hyperlink>
                </TextBlock>
            </Grid>
            <Grid
                Grid.Row="1"
                Style="{StaticResource TSGridChangesSummaryDetailFileHeader}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Image
                    Grid.Column="0"
                    Source="{Binding Icon}"
                    Margin="{StaticResource Margin_M_Left_S_TopBottom}"
                    Style="{StaticResource TSImageNewItemFileIcon}" />
                <TextBlock
                    Grid.Column="1"
                    Text="{Binding Subject}"
                    Margin="{StaticResource Margin_M_Left_S_TopBottom}"
                    Style="{StaticResource TSTextBlockChangesSummaryDetailFileHeader}" />
            </Grid>
            <ContentPresenter
                Grid.Row="2"
                Content="{Binding}"
                ContentTemplateSelector="{StaticResource fileExtensionTemplateSelector}"
                Focusable="False" />
        </Grid>
    </DataTemplate>


    <DataTemplate x:Key="TSItemTemplateBreakingChanges">
        <Grid Margin="{StaticResource Margin_M_Top}">
            <BulletDecorator>
                <BulletDecorator.Bullet>
                    <TextBlock Style="{StaticResource TSTextBlockBullet}"/>
                </BulletDecorator.Bullet>
                <TextBlock TextWrapping="Wrap" Margin="{StaticResource Margin_XS_Left}">
                    <Run Text="{Binding Message}" />
                    <Hyperlink Style="{StaticResource TSHyperlink}"
                           Command="{Binding OpenLinkCommand}"
                           AutomationProperties.Name="{Binding HyperLinkMessage}"
                           ToolTip="{x:Static res:StringRes.ExternalHyperlinkTooltipMessage}">
                        <Grid Background="Transparent">
                            <TextBlock Text="{Binding HyperLinkMessage}" Style="{StaticResource TSTextBlockHyperlink}" />
                        </Grid>
                    </Hyperlink>
                </TextBlock>
            </BulletDecorator>
        </Grid>
    </DataTemplate>

    <!--#endregion-->

    <!--#region MarkdownBlock -->

    <Style TargetType="FlowDocument" x:Key="DocumentStyle">
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="PagePadding" Value="0" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FontSize" Value="{Binding Environment122PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding TemplateInfoPageDescription, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style x:Key="BaseMarkdownText" TargetType="Paragraph">
        <Setter Property="Foreground" Value="{Binding TemplateInfoPageDescription, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="{Binding Environment122PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style x:Key="H1Style" TargetType="Paragraph" BasedOn="{StaticResource BaseMarkdownText}">
        <Setter Property="FontSize" Value="{Binding Environment155PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style x:Key="H2Style" TargetType="Paragraph" BasedOn="{StaticResource BaseMarkdownText}">
        <Setter Property="FontSize" Value="{Binding Environment133PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style x:Key="H3Style" TargetType="Paragraph" BasedOn="{StaticResource BaseMarkdownText}">
        <Setter Property="FontSize" Value="{Binding Environment133PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style x:Key="H4Style" TargetType="Paragraph" BasedOn="{StaticResource BaseMarkdownText}">
        <Setter Property="FontSize" Value="{Binding Environment122PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <Style x:Key="ImageStyle" TargetType="Image">
        <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor" />
        <Style.Triggers>
            <Trigger Property="Tag" Value="imageright">
                <Setter Property="Margin"  Value="20,0,0,0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SeparatorStyle" TargetType="Line">
        <Setter Property="X2" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=FlowDocumentScrollViewer}}" />
        <Setter Property="Stroke" Value="{Binding SectionDivider, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="StrokeThickness" Value="2" />
    </Style>

    <!-- Notification markdown -->
    <Style x:Key="TSNotificationMarkdownStyle" TargetType="controls:NotificationMarkdownBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="{StaticResource Margin_M_LeftTopRightBottom}" />
    </Style>

    <Style x:Key="DocumentNotificationStyle" TargetType="FlowDocument" BasedOn="{StaticResource DocumentStyle}">
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Foreground" Value="{Binding IBInfoBarBackgroundText, Source={x:Static services:UIStylesService.Instance}}" />
    </Style>

    <!--#endregion-->

</ResourceDictionary>
